generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                 String    @id
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime
  user               user      @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([providerId, providerAccountId], map: "Account_providerId_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model session {
  id           String   @id
  userId       String
  expires      DateTime
  sessionToken String   @unique(map: "Session_sessionToken_key")
  accessToken  String   @unique(map: "Session_accessToken_key")
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  account       account[]
  session       session[]
}

model verificationrequest {
  id         String   @id
  identifier String
  token      String   @unique(map: "VerificationRequest_token_key")
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, token], map: "VerificationRequest_identifier_token_key")
}

model issue {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}
